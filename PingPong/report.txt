Microgame #1 Ping Pong Game
Franklin Assa
003068831

Create new 2D Core project

Create folders under Assets (SCRIPTS, SPRITES, PREFABS)

Create Background object using downloaded image

Create Wall game objects (Top, Right, Bottom, Left), attach Box Collider 2D to walls

Create paddle game object as Paddle Left, attach Box Collider 2D and Rigidbody 2D

Create script file for paddle object, PaddleController.cs, attach script file to paddle
  Save Paddle as a prefab and change tag to “Player”

Create paddle for Paddle Right by dragging Paddle object to the scene, set position opposite of Paddle Left

Write script for paddle controls, attach script to Paddle prefab
    public class PaddleController : MonoBehaviour
    {
        public bool leftPlayer;
        public float speed;

        int leftUp, rightUp;

        Rigidbody2D rb2d;

        private void Awake()
        {
                rb2d = GetComponent<Rigidbody2D>();
        }

        // Update is called once per frame
        void Update()
        {
            if(leftPlayer) //control left paddle
            {
               {
        public bool leftPlayer;
        public float speed;

        int leftUp, rightUp;

        Rigidbody2D rb2d;

        private void Awake()
        {
                rb2d = GetComponent<Rigidbody2D>();
        }

        // Update is called once per frame
        void Update()
        {
            if(leftPlayer) //control left paddle
            {
                if(Input.GetKey(KeyCode.W) )
                    leftUp = 1;
                if(Input.GetKey(KeyCode.S))
                    leftUp = -1;
                rb2d.AddForce(Vector2.up * leftUp * speed * Time.deltaTime);
            }
            else //control right paddle
            {
                if(Input.GetKey(KeyCode.UpArrow) )
                    rightUp = 1;
                if(Input.GetKey(KeyCode.DownArrow))
                    rightUp = -1;
                rb2d.AddForce(Vector2.up * rightUp * speed * Time.deltaTime);
            }
        }
    }
     if(Input.GetKey(KeyCode.W) )
                    leftUp = 1;
                if(Input.GetKey(KeyCode.S))
                    leftUp = -1;
                rb2d.AddForce(Vector2.up * leftUp * speed * Time.deltaTime);
            }
            else //control right paddle
            {
                if(Input.GetKey(KeyCode.UpArrow) )
                    rightUp = 1;
                if(Input.GetKey(KeyCode.DownArrow))
                    rightUp = -1;
                rb2d.AddForce(Vector2.up * rightUp * speed * Time.deltaTime);
            }
        }
    }

    Paddle Left is checked as true, Paddle Right is unchecked


Create Ball game object, attach Circle Collider 2D and Rigidbody 2D components

Create Bounce physics material, with friction 0 and bounciness 1, attach material to Circle Collider 2D

Create script, BallController.cs, attached to Ball game object
  Set Bounce physics to Circle Collider 2D material of the Ball object

Create function to move the ball a random direction upon starting, and change velocity when the ball bounces from paddles
   void PushBall()
    {
        int direction = Random.Range(0, 2); // returns number from 0 to 1
        float x, y;
        if(direction == 0) // ball moves to the right
        {
            x = speed;
        }
        else // ball moves to the left
        {
            x = -speed;
        }
        y = Random.Range(-randomUp, randomUp);
        rb2d.AddForce(new Vector2(x, y));
    }
    private void OnColliderEnter2D(Collision2D collision)
    {
        if(collision.gameObject.CompareTag("Player"))
        {
            Vector2 velocity;
            velocity.x = rb2d.velocity.x;
            velocity.y = (rb2d.velocity.y / 2) + (collision.collider.attachedRigidbody.velocity.y) / 3;
        }
    }
 
Create new Text UI to display score
In BallContoller.cs, create function to reset the ball position when it crosses the goal, keep player scores, and increment player score on Text UI when the ball crosses the goal
    private void OnTriggerEnter2D(Collider2D collision)
        {
            if(collision.gameObject.CompareTag("Goal"))
            {
                if(rb2d.velocity.x > 0) // collide with right wall, left player scores
                {
                    controller.Score(true);
                }
                else if(rb2d.velocity.x < 0) // collide with left wall, right player scores
                {
                    controller.Score(false);
                }
                else
                {

                }

                rb2d.velocity = Vector2.zero;
                transform. position = Vector3.zero;

                Invoke("PushBall", 2f);
            }
        }

Create empty game object GameController and script GameController.cs, attach script to object

In GameController.cs, create function to increment scores and determine winner, to be called on BallController.cs
    public void Score(bool leftPlayerGetScore)
        {  
            if(leftPlayerGetScore)
            {
                leftPlayerScore++;
            }
            else
            {
                rightPlayerScore++;
            }

            if(leftPlayerScore >= maxScore)
            {
                scoreText.text = "Left Player wins!";
                GameOver();
            }
            else if(rightPlayerScore >= maxScore)
            {
                scoreText.text = "Right Player wins!";
                GameOver();
            }
            else
            {
                scoreText.text = leftPlayerScore + " : " + rightPlayerScore;
            }

        }

    Attach Text UI to GameController object

Create new Image and Text UI to display end of game message, and add functionality to restart game
    void GameOver()
        {
            gameOver = true;
            gameOverUI.SetActive(true);
            Time.timeScale = 0f;
        }
        // Update is called once per frame
        void Update()
        {
            if(gameOver)
            {
                if(Input.anyKeyDown)
                {
                    Restart();
                }
            }
        }

        void Restart()
        {
            SceneManager.LoadScene("SampleScene");
            Time.timeScale = 1f;
        }

    Attach new Image and Text UI to GameController object

